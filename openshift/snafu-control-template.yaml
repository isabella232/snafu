apiVersion: v1
kind: Template
metadata:
  name: snafu-control
parameters:
- name: SNAFU_IMAGE
  description: Image to deploy
  value: docker.io/appuio/snafu
- name: SNAFU_IMAGE_TAG
  description: Tag of the Snafu Docker Image to deploy
  value: latest
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: snafu-control
    name: snafu-control
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: ${SNAFU_IMAGE}:${SNAFU_IMAGE_TAG}
      importPolicy: {}
      name: ${SNAFU_IMAGE_TAG}
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: snafu-control
    name: snafu-control
  spec:
    replicas: 1
    selector:
      app: snafu-control
      deploymentconfig: snafu-control
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: snafu-control
          deploymentconfig: snafu-control
      spec:
        containers:
        - args:
          - --authenticator=aws
          command:
          - /opt/snafu-control
          - -s
          - /etc/snafu/snafu.ini
          image: snafu-control
          imagePullPolicy: Always
          name: snafu-control
          ports:
          - containerPort: 10000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/namespaces
              port: 10000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/snafu
            name: config
          - mountPath: /root
            name: snafu-accounts
          - mountPath: /opt/functions-tenants
            name: snafu-functions
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: config-snafu-control
          name: config
        - configMap:
            defaultMode: 420
            name: snafu-accounts
          name: snafu-accounts
        - emptyDir: {}
          name: snafu-functions
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - snafu-control
        from:
          kind: ImageStreamTag
          name: snafu-control:${SNAFU_IMAGE_TAG}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: snafu-control
    name: snafu-control
  spec:
    ports:
    - name: 10000-tcp
      port: 10000
      protocol: TCP
      targetPort: 10000
    selector:
      app: snafu-control
      deploymentconfig: snafu-control
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: snafu-control
  spec:
    port:
      targetPort: 10000-tcp
    to:
      kind: Service
      name: snafu-control
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  data:
    snafu.ini: |
      [snafu]
      logger.csv = /tmp/snafu.csv
      connector.web = 8080
  kind: ConfigMap
  metadata:
    name: config-snafu-control
- apiVersion: v1
  data:
    .snafu-accounts: |
      [account0]
      access_key_id = mykey
      secret_access_key = mayccesskey
  kind: ConfigMap
  metadata:
    name: snafu-accounts
